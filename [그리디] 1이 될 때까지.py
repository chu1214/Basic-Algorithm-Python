'''
# 개요
  어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 한다.
  단, 두 번째 연산은 N이 K로 나누어떨어질 때만 선택할 수 있다.
  * 과정
    1. N에서 1을 뺀다.
    2. N을 K로 나눈다.
# 입력 조건
  첫째 줄에 N(2 <= N <= 100,000)과 K(2<= K <= 100,000)가 공백으로 구분되며 각각 자연수로 주어진다.
  이때 입력으로 주어지는 N은 항상 K보다 크거나 같다.
# 출력 조건 
  첫째 줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최솟값을 출력한다.
# 시간 제한 1초, 메모리 제한 128MB
'''
'''
# 1차 풀이 >> O(N)
N, K = map(int, input().split())
count = 0
while N != 1:
    if N % K == 0:
        N /= K
    else:
        N -= 1
    count += 1
print(count)

# 위 풀이는 코드의 길이는 짧으나 반복 1회 당 1번의 연산을 한다. 반복 횟수를 줄이는 코드를 작성해보았다.
# 문제의 핵심은 나누기를 최대한 많이 하는 것이므로 N이 K로 나누어 떨어질 때까지 한번에 빼주면 된다.
'''

# 2차 풀이 >> O(N)
N, K = map(int, input().split())
count = 0
while True:
    temp = (N // K) * K
    count += (N - temp)
    N = temp
    if N < K: break
    N /= K
    count += 1

count += N - 1
print(count)
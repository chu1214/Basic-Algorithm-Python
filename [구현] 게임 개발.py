'''
# 개요
  현민이는 게임 캐릭터가 맵 안에서 움직이는 시스템을 개발 중이다. 
  캐릭터가 있는 장소는 1 X 1 크기의 정사각형으로 이뤄진 N X M 크기의 직사각형으로, 각각의 칸은 육지 또는 바다이다.
  캐릭터는 동서남북 중 한 곳을 바라본다.
  맵의 각 칸은 (A, B)로 나타낼 수 있고, A는 북쪽으로부터 떨어진 칸의 개수, B는 서쪽으로부터 떨어진 칸의 개수이다.
  캐릭터는 상하좌우로 움직일 수 있고, 바다로 되어 있는 공간에는 갈 수 없다.
  * 매뉴얼
    1. 현재 위치에서 현재 방향을 기준으로 왼쪽 방향(반시계 방향으로 90도 회전한 방향)부터 차례대로 갈 곳을 정한다.
    2. 캐릭터의 바로 왼쪽 방향에 아직 가보지 않은 칸이 존재한다면, 왼쪽 방향으로 회전한 다음 왼쪽으로 한 칸을 전진한다.
       왼쪽 방향에 가보지 않은 칸이 없다면, 왼쪽 방향으로 회전만 수행하고 1단계로 돌아간다.
    3. 만약 네 방향 모두 이미 가본 칸이거나 바다로 되어있는 칸인 경우에는, 바라보는 방향을 유지한 채로 한 칸 뒤로 가고 1단계로 돌아간다.
       단, 이때 뒤쪽 방향이 바다인 칸이라 뒤로 갈 수 없는 경우에는 움직임을 멈춘다.
# 입력 조건
  첫째 줄에 맵의 세로 크기 N과 가로 크기 M을 공백으로 구분하여 입력한다. (3 <= N, M <= 50)
  둘째 줄에 게임 캐릭터가 있는 칸의 좌표 (A, B)와 바라보는 방향 d가 서로 공백으로 구분하여 주어진다. 방향 d의 값으로는 다음과 같이 4가지가 존재한다.
  - 0: 북쪽, 1: 동쪽, 2: 남쪽, 3: 서쪽
  셋째 줄부터 맵이 육지인지 바다인지에 대한 정보가 주어진다. N개의 줄에 맵의 상태가 북쪽부터 남쪽 순서대로, 각 줄의 데이터는 서쪽부터 동쪽 순서대로 주어진다.
  맵의 외곽은 항상 바다로 되어있다.
  - 0: 육지, 1: 바다
  처음 캐릭터가 위치한 칸의 상태는 항상 육지이다.
# 출력 조건 
  첫째 줄에 이동을 마친 후 캐릭터가 방문한 칸의 수를 출력한다.
# 시간 제한 1초, 메모리 제한 128MB
'''

# 1차 풀이
N, M = map(int, input().split())
X, Y, D = map(int, input().split())
visited = [[0] * M for _ in range(N)] # 2차원 리스트 컴프리헨션
field = []
for i in range(N):
    field.append(list(map(int, input().split()))) # 한 줄씩 입력받아 2차원 배열 생성

dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

def turn_left(): 
    global D # 전역변수 활용을 위해 선언
    D -= 1
    if D == -1:
        D = 3

visited[X][Y] = 1
result = 1
turn_time = 0
while True:
    turn_left()
    nx = X + dx[D] 
    ny = Y + dy[D]
    
    if visited[nx][ny] == 0 and field[nx][ny] == 0: # 가보지 않았으며, 육지인 경우
        visited[nx][ny] = 1
        turn_time = 0
        result += 1
        X = nx
        Y = ny
    else: # 가보았거나, 바다인 경우
        turn_time += 1
    
    if turn_time == 4:
        nx = X - dx[D]
        ny = Y - dy[D]
        if field[nx][ny] == 1:
            break
        else:
            X = nx
            Y = ny
        turn_time = 0

print(result)

# N X M 2차원 리스트 컴프리헨션 코드가 바로 떠오르지 않았다. >> array = [[0] * M for _ in range(N)]
# 맵처럼 여러줄에 걸쳐 리스트에 입력을 받는 방식을 알게 되었다. >> array = [], array.append(list(map(int, input().split())))
# 함수 정의 시 함수 외부에 이미 선언된 전역변수를 활용하는 방법이 바로 떠오르지 않았다. >> global D
# 비슷한 유형의 문제에서 방향마다 할당된 번호와 dx, dy라는 이동에 대한 정보를 담은 리스트를 활용하여 반복문으로 풀어낼 수 있도록 연습해야겠다.
# 실제 이동할 곳이 아니더라도 nx, ny를 이용하여 시뮬레이션으로 이동한 뒤 해당 위치의 당위성에 대하여 판단하여 참이면 이동, 거짓이면 다음 경우의 시뮬레이션을 하자.
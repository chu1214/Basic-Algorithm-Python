'''
# 개요
  동빈이는 N X M 크기의 직사각형 형태의 미로에 갇혀 있다. 미로에는 여러 마리의 괴물이 있어 이를 피해 탈출해야한다.
  동빈이의 위치는 (1, 1)이고 미로의 출구는 (N, M)의 위치에 존재하며 한 번에 한 칸씩 이동할 수 있따.
  이때, 괴물이 있는 부분은 0으로, 괴물이 없는 부분은 1로 표시되어 있다.
  미로는 반드시 탈출할 수 있는 형태로 제시된다. 이때 동빈이가 탈출하기 위해 움직여야 하는 최소 칸의 캐수를 구하시오. 칸을 셀 때는 시작 칸과 마지막 칸을 모두 포함해서 계산한다.
# 입력 조건
  첫째 줄에 두 정수 N, M(4 <= N, M <= 200)이 주어집니다. 다음 N개의 줄에는 각각 M개의 정수(0 혹은 1)로 미로의 정보가 주어진다.
  각각의 수들은 공백 없이 붙어서 입력으로 제시된다. 또한 시작 칸과 마지막 칸은 항상 1이다.
# 출력 조건 
  첫째 줄에 최소 이동 칸의 개수를 출력한다.
# 시간 제한 1초, 메모리 제한 128MB
'''

# 1차 풀이

from collections import deque

N, M = map(int, input().split())

graph = []
for _ in range(N):
    graph.append(list(map(int, input())))

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

def bfs(x, y):
    queue = deque()
    queue.append((x, y))
    while queue:
        x, y = queue.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if nx < 0 or ny < 0 or nx >= N or ny >= M:
                continue
            if graph[nx][ny] == 0:
                continue
            if graph[nx][ny] == 1:
                queue.append((nx, ny))
                graph[nx][ny] = graph[x][y] + 1
    return graph[N - 1][M - 1]

print(bfs(0, 0))

'''
# BFS를 이용하여 구현하였다.
  최단경로를 구하면서 각 간선(Edge)에 가중치가 없으므로 BFS로 풀이하는 것이 효율적이라고 생각하였다.
  시작 노드로부터 상하좌우를 탐색하여 갈 수 있는 모든 노드를 큐에 넣어줘야하기 때문에, 탐색을 반복문으로 간결하게 표현하기 위해 dx, dy 리스트를 만들어 주었다.
  다만 리스트에 append 된 튜플 자료형을 pop 할 때 튜플의 구성요소를 각각의 변수에 저장할 수 있다는 것을 바로 떠올리지 못했다.
  맵을 벗어난 경우와 괴물이 있는 부분은 갈 수 없기 때문에 예외처리를 하였어야 하는데, 그 부분이 미숙했다.
  함수의 리턴 시 바로 원하는 결과 값을 리턴하면 되는데, 함수를 실행하고 출구값을 print 하려고 했다.
'''